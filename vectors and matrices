#lang racket

;; NEED UPDATE
;; IDEAS: MATRIX MULTIPLICATION; DOT-PRODUCT; CROSS PRODUCT; RREF (gonna be hard, but should be possible?); 

;; A Matrix is a (listof (listof Num))
;; A Vector is a (listof Num)


;; (dot_product a b) calculates the dot product of vectors a and b
;; dot_product: Vector Vector -> Num
;; requires: length of a and b must be the same
(define (dot-product a b)
  (foldr + 0 (map (lambda (ele_a ele_b) (* a b)) a b)))

;; (cross_product a b) calculates cross product of vectors a and b
;; cross_product: Vector Vector -> Vector
;; requires: length of a = length of b = 3
(define (cross_product a b)
  (list (- (*(second a) (third b)) (*(second b) (first a)))
        (- (*(first b) (third a)) (*(first a) (third b)))
        (- (*(first a) (second b)) (*(first b) (second a)))))
        
        
        
